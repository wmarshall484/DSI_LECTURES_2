
psql
\l
\c socialmedia
\d
\d friends
\d logins
SELECT * FROM logins LIMIT 10;
SELECT type, COUNT(*) FROM logins 
GROUP BY type;
\d
\d messages
SELECT * FROM messages LIMIT 2;
\d optout
\d registrations
SELECT type, COUNT(*) FROM registrations 
GROUP BY type;
\d
\d test_group
SELECT grp, COUNT(*) FROM test_group 
GROUP BY grp;


“How did we randomize?”

-- looks random
SELECT date_trunc('day', tmstmp), grp FROM registrations r 
JOIN test_group ab ON (r.userid = ab.userid)
ORDER BY tmstmp;

-- looks random
SELECT date_part('d', tmstmp), date_part('m', tmstmp),
               date_part('yr', tmstmp), grp FROM registrations r    
	       JOIN test_group ab ON (r.userid = ab.userid)       
	       ORDER BY tmstmp;
-- put in AS <names>
-- fix the month thing


“How many times did each user visit?”

-- join users/logins
-- save that file name so it’s nice
CREATE TABLE total_logins_table AS
SELECT userid, COUNT(*) AS total_logins FROM logins 
GROUP BY userid
ORDER BY total_logins;

-- make a histogram
CREATE TABLE logins_histogram AS 
SELECT total_logins, COUNT(*) AS number_individuals FROM total_logins_table
GROUP BY total_logins ORDER BY total_logins;

CREATE TABLE logins_histogram_support AS
SELECT userid as index FROM registrations
       ORDER BY userid 
       LIMIT (SELECT MAX(total_logins)+1 FROM logins_histogram);

-- now we’ll do a hack to see a left join
-- to make a proper histogram
SELECT index, COALESCE(number_individuals, 0) FROM logins_histogram_support 
       LEFT JOIN logins_histogram ON (index = total_logins);


-- Are the total number of logins different across groups?
SELECT grp, AVG(total_logins) FROM total_logins_table tl 
JOIN test_group ab ON (tl.userid = ab.userid)
GROUP BY grp;





-- does total number of friends differ by group?

CREATE TABLE friends_by_user AS
SELECT DISTINCT r.userid, 
CASE WHEN r.userid = f.userid1 THEN f.userid2 ELSE f.userid1 END AS friends
FROM registrations r JOIN friends f ON (r.userid = f.userid1 OR r.userid = f.userid2)
ORDER BY r.userid;

SELECT grp, AVG(number_friends) AS average_number_friends FROM 
       (SELECT userid, COUNT(*) AS number_friends FROM friends_by_user GROUP BY userid) total_friends 
       JOIN test_group ab ON (total_friends.userid = ab.userid)
GROUP BY grp;



# optout different?
# web/phone type different?
# 


