PG_DUMP(1)              PostgreSQL 9.5.2 Documentation              PG_DUMP(1)



NNAAMMEE
       pg_dump - extract a PostgreSQL database into a script file or other
       archive file

SSYYNNOOPPSSIISS
       ppgg__dduummpp [_c_o_n_n_e_c_t_i_o_n_-_o_p_t_i_o_n...] [_o_p_t_i_o_n...] [_d_b_n_a_m_e]

DDEESSCCRRIIPPTTIIOONN
       pg_dump is a utility for backing up a PostgreSQL database. It makes
       consistent backups even if the database is being used concurrently.
       pg_dump does not block other users accessing the database (readers or
       writers).

       pg_dump only dumps a single database. To backup global objects that are
       common to all databases in a cluster, such as roles and tablespaces,
       use ppgg__dduummppaallll(1).

       Dumps can be output in script or archive file formats. Script dumps are
       plain-text files containing the SQL commands required to reconstruct
       the database to the state it was in at the time it was saved. To
       restore from such a script, feed it to ppssqqll(1). Script files can be
       used to reconstruct the database even on other machines and other
       architectures; with some modifications, even on other SQL database
       products.

       The alternative archive file formats must be used with ppgg__rreessttoorree(1) to
       rebuild the database. They allow pg_restore to be selective about what
       is restored, or even to reorder the items prior to being restored. The
       archive file formats are designed to be portable across architectures.

       When used with one of the archive file formats and combined with
       pg_restore, pg_dump provides a flexible archival and transfer
       mechanism.  pg_dump can be used to backup an entire database, then
       pg_restore can be used to examine the archive and/or select which parts
       of the database are to be restored. The most flexible output file
       formats are the "custom" format (--FFcc) and the "directory" format(--FFdd).
       They allow for selection and reordering of all archived items, support
       parallel restoration, and are compressed by default. The "directory"
       format is the only format that supports parallel dumps.

       While running pg_dump, one should examine the output for any warnings
       (printed on standard error), especially in light of the limitations
       listed below.

OOPPTTIIOONNSS
       The following command-line options control the content and format of
       the output.

       _d_b_n_a_m_e
           Specifies the name of the database to be dumped. If this is not
           specified, the environment variable PPGGDDAATTAABBAASSEE is used. If that is
           not set, the user name specified for the connection is used.

       --aa
       ----ddaattaa--oonnllyy
           Dump only the data, not the schema (data definitions). Table data,
           large objects, and sequence values are dumped.

           This option is similar to, but for historical reasons not identical
           to, specifying ----sseeccttiioonn==ddaattaa.

       --bb
       ----bblloobbss
           Include large objects in the dump. This is the default behavior
           except when ----sscchheemmaa, ----ttaabbllee, or ----sscchheemmaa--oonnllyy is specified, so
           the --bb switch is only useful to add large objects to selective
           dumps.

       --cc
       ----cclleeaann
           Output commands to clean (drop) database objects prior to
           outputting the commands for creating them. (Unless ----iiff--eexxiissttss is
           also specified, restore might generate some harmless error
           messages, if any objects were not present in the destination
           database.)

           This option is only meaningful for the plain-text format. For the
           archive formats, you can specify the option when you call
           ppgg__rreessttoorree.

       --CC
       ----ccrreeaattee
           Begin the output with a command to create the database itself and
           reconnect to the created database. (With a script of this form, it
           doesn't matter which database in the destination installation you
           connect to before running the script.) If ----cclleeaann is also
           specified, the script drops and recreates the target database
           before reconnecting to it.

           This option is only meaningful for the plain-text format. For the
           archive formats, you can specify the option when you call
           ppgg__rreessttoorree.

       --EE _e_n_c_o_d_i_n_g
       ----eennccooddiinngg==_e_n_c_o_d_i_n_g
           Create the dump in the specified character set encoding. By
           default, the dump is created in the database encoding. (Another way
           to get the same result is to set the PPGGCCLLIIEENNTTEENNCCOODDIINNGG environment
           variable to the desired dump encoding.)

       --ff _f_i_l_e
       ----ffiillee==_f_i_l_e
           Send output to the specified file. This parameter can be omitted
           for file based output formats, in which case the standard output is
           used. It must be given for the directory output format however,
           where it specifies the target directory instead of a file. In this
           case the directory is created by ppgg__dduummpp and must not exist before.

       --FF _f_o_r_m_a_t
       ----ffoorrmmaatt==_f_o_r_m_a_t
           Selects the format of the output.  _f_o_r_m_a_t can be one of the
           following:

           p
           plain
               Output a plain-text SQL script file (the default).

           c
           custom
               Output a custom-format archive suitable for input into
               pg_restore. Together with the directory output format, this is
               the most flexible output format in that it allows manual
               selection and reordering of archived items during restore. This
               format is also compressed by default.

           d
           directory
               Output a directory-format archive suitable for input into
               pg_restore. This will create a directory with one file for each
               table and blob being dumped, plus a so-called Table of Contents
               file describing the dumped objects in a machine-readable format
               that pg_restore can read. A directory format archive can be
               manipulated with standard Unix tools; for example, files in an
               uncompressed archive can be compressed with the gzip tool. This
               format is compressed by default and also supports parallel
               dumps.

           t
           tar
               Output a ttaarr-format archive suitable for input into pg_restore.
               The tar format is compatible with the directory format:
               extracting a tar-format archive produces a valid
               directory-format archive. However, the tar format does not
               support compression. Also, when using tar format the relative
               order of table data items cannot be changed during restore.

       --jj _n_j_o_b_s
       ----jjoobbss==_n_j_o_b_s
           Run the dump in parallel by dumping _n_j_o_b_s tables simultaneously.
           This option reduces the time of the dump but it also increases the
           load on the database server. You can only use this option with the
           directory output format because this is the only output format
           where multiple processes can write their data at the same time.

           pg_dump will open _n_j_o_b_s + 1 connections to the database, so make
           sure your max_connections setting is high enough to accommodate all
           connections.

           Requesting exclusive locks on database objects while running a
           parallel dump could cause the dump to fail. The reason is that the
           pg_dump master process requests shared locks on the objects that
           the worker processes are going to dump later in order to make sure
           that nobody deletes them and makes them go away while the dump is
           running. If another client then requests an exclusive lock on a
           table, that lock will not be granted but will be queued waiting for
           the shared lock of the master process to be released. Consequently
           any other access to the table will not be granted either and will
           queue after the exclusive lock request. This includes the worker
           process trying to dump the table. Without any precautions this
           would be a classic deadlock situation. To detect this conflict, the
           pg_dump worker process requests another shared lock using the
           NOWAIT option. If the worker process is not granted this shared
           lock, somebody else must have requested an exclusive lock in the
           meantime and there is no way to continue with the dump, so pg_dump
           has no choice but to abort the dump.

           For a consistent backup, the database server needs to support
           synchronized snapshots, a feature that was introduced in PostgreSQL
           9.2. With this feature, database clients can ensure they see the
           same data set even though they use different connections.  ppgg__dduummpp
           --jj uses multiple database connections; it connects to the database
           once with the master process and once again for each worker job.
           Without the synchronized snapshot feature, the different worker
           jobs wouldn't be guaranteed to see the same data in each
           connection, which could lead to an inconsistent backup.

           If you want to run a parallel dump of a pre-9.2 server, you need to
           make sure that the database content doesn't change from between the
           time the master connects to the database until the last worker job
           has connected to the database. The easiest way to do this is to
           halt any data modifying processes (DDL and DML) accessing the
           database before starting the backup. You also need to specify the
           ----nnoo--ssyynncchhrroonniizzeedd--ssnnaappsshhoottss parameter when running ppgg__dduummpp --jj
           against a pre-9.2 PostgreSQL server.

       --nn _s_c_h_e_m_a
       ----sscchheemmaa==_s_c_h_e_m_a
           Dump only schemas matching _s_c_h_e_m_a; this selects both the schema
           itself, and all its contained objects. When this option is not
           specified, all non-system schemas in the target database will be
           dumped. Multiple schemas can be selected by writing multiple --nn
           switches. Also, the _s_c_h_e_m_a parameter is interpreted as a pattern
           according to the same rules used by psql's \d commands (see
           Patterns), so multiple schemas can also be selected by writing
           wildcard characters in the pattern. When using wildcards, be
           careful to quote the pattern if needed to prevent the shell from
           expanding the wildcards; see EXAMPLES.

               NNoottee
               When --nn is specified, pg_dump makes no attempt to dump any
               other database objects that the selected schema(s) might depend
               upon. Therefore, there is no guarantee that the results of a
               specific-schema dump can be successfully restored by themselves
               into a clean database.

               NNoottee
               Non-schema objects such as blobs are not dumped when --nn is
               specified. You can add blobs back to the dump with the ----bblloobbss
               switch.

       --NN _s_c_h_e_m_a
       ----eexxcclluuddee--sscchheemmaa==_s_c_h_e_m_a
           Do not dump any schemas matching the _s_c_h_e_m_a pattern. The pattern is
           interpreted according to the same rules as for --nn.  --NN can be given
           more than once to exclude schemas matching any of several patterns.

           When both --nn and --NN are given, the behavior is to dump just the
           schemas that match at least one --nn switch but no --NN switches. If --NN
           appears without --nn, then schemas matching --NN are excluded from what
           is otherwise a normal dump.

       --oo
       ----ooiiddss
           Dump object identifiers (OIDs) as part of the data for every table.
           Use this option if your application references the OID columns in
           some way (e.g., in a foreign key constraint). Otherwise, this
           option should not be used.

       --OO
       ----nnoo--oowwnneerr
           Do not output commands to set ownership of objects to match the
           original database. By default, pg_dump issues AALLTTEERR OOWWNNEERR or SSEETT
           SSEESSSSIIOONN AAUUTTHHOORRIIZZAATTIIOONN statements to set ownership of created
           database objects. These statements will fail when the script is run
           unless it is started by a superuser (or the same user that owns all
           of the objects in the script). To make a script that can be
           restored by any user, but will give that user ownership of all the
           objects, specify --OO.

           This option is only meaningful for the plain-text format. For the
           archive formats, you can specify the option when you call
           ppgg__rreessttoorree.

       --RR
       ----nnoo--rreeccoonnnneecctt
           This option is obsolete but still accepted for backwards
           compatibility.

       --ss
       ----sscchheemmaa--oonnllyy
           Dump only the object definitions (schema), not data.

           This option is the inverse of ----ddaattaa--oonnllyy. It is similar to, but
           for historical reasons not identical to, specifying
           ----sseeccttiioonn==pprree--ddaattaa ----sseeccttiioonn==ppoosstt--ddaattaa.

           (Do not confuse this with the ----sscchheemmaa option, which uses the word
           "schema" in a different meaning.)

           To exclude table data for only a subset of tables in the database,
           see ----eexxcclluuddee--ttaabbllee--ddaattaa.

       --SS _u_s_e_r_n_a_m_e
       ----ssuuppeerruusseerr==_u_s_e_r_n_a_m_e
           Specify the superuser user name to use when disabling triggers.
           This is relevant only if ----ddiissaabbllee--ttrriiggggeerrss is used. (Usually, it's
           better to leave this out, and instead start the resulting script as
           superuser.)

       --tt _t_a_b_l_e
       ----ttaabbllee==_t_a_b_l_e
           Dump only tables (or views or sequences or foreign tables) matching
           _t_a_b_l_e. Multiple tables can be selected by writing multiple --tt
           switches. Also, the _t_a_b_l_e parameter is interpreted as a pattern
           according to the same rules used by psql's \d commands (see
           Patterns), so multiple tables can also be selected by writing
           wildcard characters in the pattern. When using wildcards, be
           careful to quote the pattern if needed to prevent the shell from
           expanding the wildcards; see EXAMPLES.

           The --nn and --NN switches have no effect when --tt is used, because
           tables selected by --tt will be dumped regardless of those switches,
           and non-table objects will not be dumped.

               NNoottee
               When --tt is specified, pg_dump makes no attempt to dump any
               other database objects that the selected table(s) might depend
               upon. Therefore, there is no guarantee that the results of a
               specific-table dump can be successfully restored by themselves
               into a clean database.

               NNoottee
               The behavior of the --tt switch is not entirely upward compatible
               with pre-8.2 PostgreSQL versions. Formerly, writing -t tab
               would dump all tables named tab, but now it just dumps
               whichever one is visible in your default search path. To get
               the old behavior you can write -t '*.tab'. Also, you must write
               something like -t sch.tab to select a table in a particular
               schema, rather than the old locution of -n sch -t tab.

       --TT _t_a_b_l_e
       ----eexxcclluuddee--ttaabbllee==_t_a_b_l_e
           Do not dump any tables matching the _t_a_b_l_e pattern. The pattern is
           interpreted according to the same rules as for --tt.  --TT can be given
           more than once to exclude tables matching any of several patterns.

           When both --tt and --TT are given, the behavior is to dump just the
           tables that match at least one --tt switch but no --TT switches. If --TT
           appears without --tt, then tables matching --TT are excluded from what
           is otherwise a normal dump.

       --vv
       ----vveerrbboossee
           Specifies verbose mode. This will cause pg_dump to output detailed
           object comments and start/stop times to the dump file, and progress
           messages to standard error.

       --VV
       ----vveerrssiioonn
           Print the pg_dump version and exit.

       --xx
       ----nnoo--pprriivviilleeggeess
       ----nnoo--aaccll
           Prevent dumping of access privileges (grant/revoke commands).

       --ZZ _0_._._9
       ----ccoommpprreessss==_0_._._9
           Specify the compression level to use. Zero means no compression.
           For the custom archive format, this specifies compression of
           individual table-data segments, and the default is to compress at a
           moderate level. For plain text output, setting a nonzero
           compression level causes the entire output file to be compressed,
           as though it had been fed through gzip; but the default is not to
           compress. The tar archive format currently does not support
           compression at all.

       ----bbiinnaarryy--uuppggrraaddee
           This option is for use by in-place upgrade utilities. Its use for
           other purposes is not recommended or supported. The behavior of the
           option may change in future releases without notice.

       ----ccoolluummnn--iinnsseerrttss
       ----aattttrriibbuuttee--iinnsseerrttss
           Dump data as IINNSSEERRTT commands with explicit column names (INSERT
           INTO _t_a_b_l_e (_c_o_l_u_m_n, ...) VALUES ...). This will make restoration
           very slow; it is mainly useful for making dumps that can be loaded
           into non-PostgreSQL databases. However, since this option generates
           a separate command for each row, an error in reloading a row causes
           only that row to be lost rather than the entire table contents.

       ----ddiissaabbllee--ddoollllaarr--qquuoottiinngg
           This option disables the use of dollar quoting for function bodies,
           and forces them to be quoted using SQL standard string syntax.

       ----ddiissaabbllee--ttrriiggggeerrss
           This option is relevant only when creating a data-only dump. It
           instructs pg_dump to include commands to temporarily disable
           triggers on the target tables while the data is reloaded. Use this
           if you have referential integrity checks or other triggers on the
           tables that you do not want to invoke during data reload.

           Presently, the commands emitted for ----ddiissaabbllee--ttrriiggggeerrss must be done
           as superuser. So, you should also specify a superuser name with --SS,
           or preferably be careful to start the resulting script as a
           superuser.

           This option is only meaningful for the plain-text format. For the
           archive formats, you can specify the option when you call
           ppgg__rreessttoorree.

       ----eennaabbllee--rrooww--sseeccuurriittyy
           This option is relevant only when dumping the contents of a table
           which has row security. By default, pg_dump will set row_security
           to off, to ensure that all data is dumped from the table. If the
           user does not have sufficient privileges to bypass row security,
           then an error is thrown. This parameter instructs pg_dump to set
           row_security to on instead, allowing the user to dump the parts of
           the contents of the table that they have access to.

       ----eexxcclluuddee--ttaabbllee--ddaattaa==_t_a_b_l_e
           Do not dump data for any tables matching the _t_a_b_l_e pattern. The
           pattern is interpreted according to the same rules as for --tt.
           ----eexxcclluuddee--ttaabbllee--ddaattaa can be given more than once to exclude tables
           matching any of several patterns. This option is useful when you
           need the definition of a particular table even though you do not
           need the data in it.

           To exclude data for all tables in the database, see ----sscchheemmaa--oonnllyy.

       ----iiff--eexxiissttss
           Use conditional commands (i.e. add an IF EXISTS clause) when
           cleaning database objects. This option is not valid unless ----cclleeaann
           is also specified.

       ----iinnsseerrttss
           Dump data as IINNSSEERRTT commands (rather than CCOOPPYY). This will make
           restoration very slow; it is mainly useful for making dumps that
           can be loaded into non-PostgreSQL databases. However, since this
           option generates a separate command for each row, an error in
           reloading a row causes only that row to be lost rather than the
           entire table contents. Note that the restore might fail altogether
           if you have rearranged column order. The ----ccoolluummnn--iinnsseerrttss option is
           safe against column order changes, though even slower.

       ----lloocckk--wwaaiitt--ttiimmeeoouutt==_t_i_m_e_o_u_t
           Do not wait forever to acquire shared table locks at the beginning
           of the dump. Instead fail if unable to lock a table within the
           specified _t_i_m_e_o_u_t. The timeout may be specified in any of the
           formats accepted by SSEETT ssttaatteemmeenntt__ttiimmeeoouutt. (Allowed values vary
           depending on the server version you are dumping from, but an
           integer number of milliseconds is accepted by all versions since
           7.3. This option is ignored when dumping from a pre-7.3 server.)

       ----nnoo--sseeccuurriittyy--llaabbeellss
           Do not dump security labels.

       ----nnoo--ssyynncchhrroonniizzeedd--ssnnaappsshhoottss
           This option allows running ppgg__dduummpp --jj against a pre-9.2 server, see
           the documentation of the --jj parameter for more details.

       ----nnoo--ttaabblleessppaacceess
           Do not output commands to select tablespaces. With this option, all
           objects will be created in whichever tablespace is the default
           during restore.

           This option is only meaningful for the plain-text format. For the
           archive formats, you can specify the option when you call
           ppgg__rreessttoorree.

       ----nnoo--uunnllooggggeedd--ttaabbllee--ddaattaa
           Do not dump the contents of unlogged tables. This option has no
           effect on whether or not the table definitions (schema) are dumped;
           it only suppresses dumping the table data. Data in unlogged tables
           is always excluded when dumping from a standby server.

       ----qquuoottee--aallll--iiddeennttiiffiieerrss
           Force quoting of all identifiers. This may be useful when dumping a
           database for migration to a future version that may have introduced
           additional keywords.

       ----sseeccttiioonn==_s_e_c_t_i_o_n_n_a_m_e
           Only dump the named section. The section name can be pprree--ddaattaa,
           ddaattaa, or ppoosstt--ddaattaa. This option can be specified more than once to
           select multiple sections. The default is to dump all sections.

           The data section contains actual table data, large-object contents,
           and sequence values. Post-data items include definitions of
           indexes, triggers, rules, and constraints other than validated
           check constraints. Pre-data items include all other data definition
           items.

       ----sseerriiaalliizzaabbllee--ddeeffeerrrraabbllee
           Use a serializable transaction for the dump, to ensure that the
           snapshot used is consistent with later database states; but do this
           by waiting for a point in the transaction stream at which no
           anomalies can be present, so that there isn't a risk of the dump
           failing or causing other transactions to roll back with a
           serialization_failure. See Chapter 13, Concurrency Control, in the
           documentation for more information about transaction isolation and
           concurrency control.

           This option is not beneficial for a dump which is intended only for
           disaster recovery. It could be useful for a dump used to load a
           copy of the database for reporting or other read-only load sharing
           while the original database continues to be updated. Without it the
           dump may reflect a state which is not consistent with any serial
           execution of the transactions eventually committed. For example, if
           batch processing techniques are used, a batch may show as closed in
           the dump without all of the items which are in the batch appearing.

           This option will make no difference if there are no read-write
           transactions active when pg_dump is started. If read-write
           transactions are active, the start of the dump may be delayed for
           an indeterminate length of time. Once running, performance with or
           without the switch is the same.

       ----ssnnaappsshhoott==_s_n_a_p_s_h_o_t_n_a_m_e
           Use the specified synchronized snapshot when making a dump of the
           database (see Table 9.71, "Snapshot Synchronization Functions" for
           more details).

           This option is useful when needing to synchronize the dump with a
           logical replication slot (see Chapter 46, Logical Decoding, in the
           documentation) or with a concurrent session.

           In the case of a parallel dump, the snapshot name defined by this
           option is used rather than taking a new snapshot.

       ----uussee--sseett--sseessssiioonn--aauutthhoorriizzaattiioonn
           Output SQL-standard SSEETT SSEESSSSIIOONN AAUUTTHHOORRIIZZAATTIIOONN commands instead of
           AALLTTEERR OOWWNNEERR commands to determine object ownership. This makes the
           dump more standards-compatible, but depending on the history of the
           objects in the dump, might not restore properly. Also, a dump using
           SSEETT SSEESSSSIIOONN AAUUTTHHOORRIIZZAATTIIOONN will certainly require superuser
           privileges to restore correctly, whereas AALLTTEERR OOWWNNEERR requires
           lesser privileges.

       --??
       ----hheellpp
           Show help about pg_dump command line arguments, and exit.

       The following command-line options control the database connection
       parameters.

       --dd _d_b_n_a_m_e
       ----ddbbnnaammee==_d_b_n_a_m_e
           Specifies the name of the database to connect to. This is
           equivalent to specifying _d_b_n_a_m_e as the first non-option argument on
           the command line.

           If this parameter contains an = sign or starts with a valid URI
           prefix (postgresql:// or postgres://), it is treated as a _c_o_n_n_i_n_f_o
           string. See Section 31.1, "Database Connection Control Functions",
           in the documentation for more information.

       --hh _h_o_s_t
       ----hhoosstt==_h_o_s_t
           Specifies the host name of the machine on which the server is
           running. If the value begins with a slash, it is used as the
           directory for the Unix domain socket. The default is taken from the
           PPGGHHOOSSTT environment variable, if set, else a Unix domain socket
           connection is attempted.

       --pp _p_o_r_t
       ----ppoorrtt==_p_o_r_t
           Specifies the TCP port or local Unix domain socket file extension
           on which the server is listening for connections. Defaults to the
           PPGGPPOORRTT environment variable, if set, or a compiled-in default.

       --UU _u_s_e_r_n_a_m_e
       ----uusseerrnnaammee==_u_s_e_r_n_a_m_e
           User name to connect as.

       --ww
       ----nnoo--ppaasssswwoorrdd
           Never issue a password prompt. If the server requires password
           authentication and a password is not available by other means such
           as a .pgpass file, the connection attempt will fail. This option
           can be useful in batch jobs and scripts where no user is present to
           enter a password.

       --WW
       ----ppaasssswwoorrdd
           Force pg_dump to prompt for a password before connecting to a
           database.

           This option is never essential, since pg_dump will automatically
           prompt for a password if the server demands password
           authentication. However, pg_dump will waste a connection attempt
           finding out that the server wants a password. In some cases it is
           worth typing --WW to avoid the extra connection attempt.

       ----rroollee==_r_o_l_e_n_a_m_e
           Specifies a role name to be used to create the dump. This option
           causes pg_dump to issue a SSEETT RROOLLEE_r_o_l_e_n_a_m_e command after connecting
           to the database. It is useful when the authenticated user
           (specified by --UU) lacks privileges needed by pg_dump, but can
           switch to a role with the required rights. Some installations have
           a policy against logging in directly as a superuser, and use of
           this option allows dumps to be made without violating the policy.

EENNVVIIRROONNMMEENNTT
       PPGGDDAATTAABBAASSEE
       PPGGHHOOSSTT
       PPGGOOPPTTIIOONNSS
       PPGGPPOORRTT
       PPGGUUSSEERR
           Default connection parameters.

       This utility, like most other PostgreSQL utilities, also uses the
       environment variables supported by libpq (see Section 31.14,
       "Environment Variables", in the documentation).

DDIIAAGGNNOOSSTTIICCSS
       pg_dump internally executes SSEELLEECCTT statements. If you have problems
       running pg_dump, make sure you are able to select information from the
       database using, for example, ppssqqll(1). Also, any default connection
       settings and environment variables used by the libpq front-end library
       will apply.

       The database activity of pg_dump is normally collected by the
       statistics collector. If this is undesirable, you can set parameter
       _t_r_a_c_k___c_o_u_n_t_s to false via PPGGOOPPTTIIOONNSS or the ALTER USER command.

NNOOTTEESS
       If your database cluster has any local additions to the template1
       database, be careful to restore the output of pg_dump into a truly
       empty database; otherwise you are likely to get errors due to duplicate
       definitions of the added objects. To make an empty database without any
       local additions, copy from template0 not template1, for example:

           CREATE DATABASE foo WITH TEMPLATE template0;

       When a data-only dump is chosen and the option ----ddiissaabbllee--ttrriiggggeerrss is
       used, pg_dump emits commands to disable triggers on user tables before
       inserting the data, and then commands to re-enable them after the data
       has been inserted. If the restore is stopped in the middle, the system
       catalogs might be left in the wrong state.

       The dump file produced by pg_dump does not contain the statistics used
       by the optimizer to make query planning decisions. Therefore, it is
       wise to run AANNAALLYYZZEE after restoring from a dump file to ensure optimal
       performance; see Section 23.1.3, "Updating Planner Statistics", in the
       documentation and Section 23.1.6, "The Autovacuum Daemon", in the
       documentation for more information. The dump file also does not contain
       any AALLTTEERR DDAATTAABBAASSEE ...... SSEETT commands; these settings are dumped by
       ppgg__dduummppaallll(1), along with database users and other installation-wide
       settings.

       Because pg_dump is used to transfer data to newer versions of
       PostgreSQL, the output of pg_dump can be expected to load into
       PostgreSQL server versions newer than pg_dump's version.  pg_dump can
       also dump from PostgreSQL servers older than its own version.
       (Currently, servers back to version 7.0 are supported.) However,
       pg_dump cannot dump from PostgreSQL servers newer than its own major
       version; it will refuse to even try, rather than risk making an invalid
       dump. Also, it is not guaranteed that pg_dump's output can be loaded
       into a server of an older major version -- not even if the dump was
       taken from a server of that version. Loading a dump file into an older
       server may require manual editing of the dump file to remove syntax not
       understood by the older server.

EEXXAAMMPPLLEESS
       To dump a database called mydb into a SQL-script file:

           $ ppgg__dduummpp mmyyddbb >> ddbb..ssqqll

       To reload such a script into a (freshly created) database named newdb:

           $ ppssqqll --dd nneewwddbb --ff ddbb..ssqqll

       To dump a database into a custom-format archive file:

           $ ppgg__dduummpp --FFcc mmyyddbb >> ddbb..dduummpp

       To dump a database into a directory-format archive:

           $ ppgg__dduummpp --FFdd mmyyddbb --ff dduummppddiirr

       To dump a database into a directory-format archive in parallel with 5
       worker jobs:

           $ ppgg__dduummpp --FFdd mmyyddbb --jj 55 --ff dduummppddiirr

       To reload an archive file into a (freshly created) database named
       newdb:

           $ ppgg__rreessttoorree --dd nneewwddbb ddbb..dduummpp

       To dump a single table named mytab:

           $ ppgg__dduummpp --tt mmyyttaabb mmyyddbb >> ddbb..ssqqll

       To dump all tables whose names start with emp in the detroit schema,
       except for the table named employee_log:

           $ ppgg__dduummpp --tt ''ddeettrrooiitt..eemmpp**'' --TT ddeettrrooiitt..eemmppllooyyeeee__lloogg mmyyddbb >> ddbb..ssqqll

       To dump all schemas whose names start with east or west and end in gsm,
       excluding any schemas whose names contain the word test:

           $ ppgg__dduummpp --nn ''eeaasstt**ggssmm'' --nn ''wweesstt**ggssmm'' --NN ''**tteesstt**'' mmyyddbb >> ddbb..ssqqll

       The same, using regular expression notation to consolidate the
       switches:

           $ ppgg__dduummpp --nn ''((eeaasstt||wweesstt))**ggssmm'' --NN ''**tteesstt**'' mmyyddbb >> ddbb..ssqqll

       To dump all database objects except for tables whose names begin with
       ts_:

           $ ppgg__dduummpp --TT ''ttss__**'' mmyyddbb >> ddbb..ssqqll

       To specify an upper-case or mixed-case name in --tt and related switches,
       you need to double-quote the name; else it will be folded to lower case
       (see Patterns). But double quotes are special to the shell, so in turn
       they must be quoted. Thus, to dump a single table with a mixed-case
       name, you need something like

           $ ppgg__dduummpp --tt ""\\""MMiixxeeddCCaasseeNNaammee\\"""" mmyyddbb >> mmyyttaabb..ssqqll

SSEEEE AALLSSOO
       ppgg__dduummppaallll(1), ppgg__rreessttoorree(1), ppssqqll(1)



PostgreSQL 9.5.2                     2016                           PG_DUMP(1)
